{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./src/components/blog/listEntry.js"],"names":["TagPage","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","metadata","site","siteMetadata","to","map","node","key","id","excerpt","frontmatter","timeToRead","path","fields","slug","pageQuery","ListEntry","firstChar","title","charAt","className","styles","letter","subtitle","date","dangerouslySetInnerHTML","__html"],"mappings":"0FAAA,gGAuDeA,UAhDC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACvBC,EAAQF,EAARE,IADkC,EAEZD,EAAKE,kBAA3BC,EAFkC,EAElCA,MAAOC,EAF2B,EAE3BA,WACTC,EAAeD,EAAN,SACC,IAAfA,EAAmB,GAAK,KADV,iBAEEH,EAFF,IAIf,OACC,kBAAC,IAAD,CAAQK,SAAWN,EAAKO,KAAKC,cAC5B,6BACC,kBAAC,IAAD,CAAMC,GAAG,YAAT,YACA,4BAAKJ,GACL,4BACEF,EAAMO,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACb,OACC,kBAAC,IAAD,CAAWC,IAAKD,EAAKE,GAAIC,QAASH,EAAKG,QAASC,YAAaJ,EAAKI,YAAaC,WAAYL,EAAKK,WAAYC,KAAMN,EAAKO,OAAOC,cAmC9H,IAAMC,EAAS,a,iCCzDtB,+CAoBeC,IAfG,SAAC,GAAgD,IAA9CP,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KAChDK,EAAYP,EAAYQ,MAAMC,OAAO,GAE3C,OACA,iCACC,4BACC,0BAAMC,UAAYC,IAAOC,QAAUL,GACnC,kBAAC,IAAD,CAAMG,UAAYC,IAAOH,MAAOd,GAAIQ,GAAOF,EAAYQ,QAExD,yBAAKE,UAAYC,IAAOE,UAAYb,EAAYc,KAAhD,MAA+Db,EAA/D,aACA,yBAAKc,wBAAyB,CAAEC,OAAQjB","file":"component---src-templates-tag-js-00e7694847056bce2cbf.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql, Link } from \"gatsby\"\n\nimport ListEntry from \"../components/blog/listEntry.js\";\nimport Layout from '../components/layout'\n\nconst TagPage = ({ pageContext, data }) => {\n\tconst { tag } = pageContext;\n\tconst { edges, totalCount } = data.allMarkdownRemark;\n\tconst tagHeader = `${totalCount} post${\n\t\ttotalCount === 1 ? \"\" : \"s\"\n\t} tagged with \"${tag}\"`;\n\n\treturn (\n\t\t<Layout metadata={ data.site.siteMetadata }>\n\t\t\t<div>\n\t\t\t\t<Link to=\"/allTags\">All tags</Link>\n\t\t\t\t<h1>{tagHeader}</h1>\n\t\t\t\t<ul>\n\t\t\t\t\t{edges.map(({ node }) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ListEntry key={node.id} excerpt={node.excerpt} frontmatter={node.frontmatter} timeToRead={node.timeToRead} path={node.fields.slug}/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</Layout>\n\t);\n};\n\nTagPage.propTypes = {\n\tpageContext: PropTypes.shape({\n\t\ttag: PropTypes.string.isRequired,\n\t}),\n\tdata: PropTypes.shape({\n\t\tallMarkdownRemark: PropTypes.shape({\n\t\t\ttotalCount: PropTypes.number.isRequired,\n\t\t\tedges: PropTypes.arrayOf(\n\t\t\t\tPropTypes.shape({\n\t\t\t\t\tnode: PropTypes.shape({\n\t\t\t\t\t\tfrontmatter: PropTypes.shape({\n\t\t\t\t\t\t\tdate: PropTypes.string.isRequired,\n\t\t\t\t\t\t\ttitle: PropTypes.string.isRequired,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tfields: PropTypes.shape({\n\t\t\t\t\t\t\tslug: PropTypes.string.isRequired,\n\t\t\t\t\t\t})\n\t\t\t\t\t}),\n\t\t\t\t}).isRequired\n\t\t\t),\n\t\t}),\n\t}),\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n\tquery TagPage($tag: String) {\n\t\tsite {\n\t\t\tsiteMetadata {\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t\tallMarkdownRemark(\n\t\t\tlimit: 2000\n\t\t\tsort: { fields: [frontmatter___date], order: DESC }\n\t\t\tfilter: { frontmatter: { tags: { in: [$tag] } } }\n\t\t) {\n\t\t\ttotalCount\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tid\n\t\t\t\t\texcerpt(format: HTML)\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\tdate\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\ttimeToRead\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\"\n\nimport styles from \"./listEntry.module.css\"\n\nconst ListEntry = ({ excerpt, frontmatter, timeToRead, path }) => {\n\tconst firstChar = frontmatter.title.charAt(0);\n\n\treturn (\n\t<article>\n\t\t<h2>\n\t\t\t<span className={ styles.letter }>{firstChar}</span>\n\t\t\t<Link className={ styles.title} to={path}>{frontmatter.title}</Link>\n\t\t</h2>\n\t\t<div className={ styles.subtitle }>{frontmatter.date} &mdash; {timeToRead} Min Read</div>\n\t\t<div dangerouslySetInnerHTML={{ __html: excerpt }} />\n\t</article>\n  )\n}\n\nexport default ListEntry;"],"sourceRoot":""}