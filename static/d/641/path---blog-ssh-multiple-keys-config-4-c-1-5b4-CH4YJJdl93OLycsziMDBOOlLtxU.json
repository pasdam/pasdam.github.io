{"data":{"site":{"siteMetadata":{"disqusShortname":"pasdam-github-io","title":"/dev/null"}},"markdownRemark":{"id":"7eeba190-86e3-5603-9ce8-1aaf4c17649f","frontmatter":{"date":"December 12, 2018","title":"How to use different SSH keys","tags":["SSH","OpenSSL","bash","tutorial"]},"html":"<p>As a developer you might have to deal with SSH keys to access specific API/machines\nIn this guide I will show you how to use a different SSH key for each domain.</p>\n<!-- intro_end -->\n<h2 id=\"requirements\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h2>\n<ul>\n<li>SSH.</li>\n</ul>\n<h2 id=\"creates-keys\"><a href=\"#creates-keys\" aria-label=\"creates keys permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creates keys</h2>\n<p>Following <a href=\"https://linux-audit.com/using-ed25519-openssh-keys-instead-of-dsa-rsa-ecdsa/\">best practices</a>, you should always favor <a href=\"https://en.wikipedia.org/wiki/EdDSA\">ED25519</a> SSH keys, since they are more secure and have better performance over the other types.</p>\n<p>The command is:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t ed25519 -C <span class=\"token string\">\"email@example.com\"</span></code></pre></div>\n<p>In order to have a different key for each domain, my pattern is actually:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -t ed25519 -C <span class=\"token string\">\"&lt;my_name>@&lt;domain>\"</span></code></pre></div>\n<p>for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ssh-keygen -t ed25519 -C <span class=\"token string\">\"pasdam@mydomain.com\"</span>\nGenerating public/private ed25519 key pair.\nEnter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/Users/username/.ssh/id_ed25519<span class=\"token punctuation\">)</span>: /Users/username/.ssh/mydomain.com\nEnter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:\nEnter same passphrase again:\nYour identification has been saved <span class=\"token keyword\">in</span> /Users/username/.ssh/mydomain.com.\nYour public key has been saved <span class=\"token keyword\">in</span> /Users/username/.ssh/mydomain.com.pub.</code></pre></div>\n<p>For an extra layer of security you could specify a password for the private key, but that would mean to have to enter it everytime you want to use the key.</p>\n<p>If you prefer the old RSA keys, because for instance you have to login on a legacy system that doesn't support <a href=\"https://en.wikipedia.org/wiki/EdDSA\">ED25519</a>, you can generate the key pair with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -o -t rsa -b 4096 -C <span class=\"token string\">\"email@example.com\"</span></code></pre></div>\n<p>Once created the key pair, you can store the public one into the service/server you want to access.</p>\n<p>For instance to open an SSH connection to a VPS just run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span>@<span class=\"token operator\">&lt;</span>domain_or_ip<span class=\"token operator\">></span> -i <span class=\"token operator\">&lt;</span>private_key<span class=\"token operator\">></span></code></pre></div>\n<p>i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> pasdam@mydomain.com -i ~/.ssh/mydomain.com</code></pre></div>\n<p>Note: if you only have one key, the last part (<code class=\"language-text\">-i ~/.ssh/mydomain.com</code>) is not needed.</p>\n<h2 id=\"configure-ssh\"><a href=\"#configure-ssh\" aria-label=\"configure ssh permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure SSH</h2>\n<p>Instead of specifying for each domain which key to use every time we use the <code class=\"language-text\">ssh</code> command, we can configure it to automatically load the correct one.</p>\n<p>To do so, we need to create/edit the file <a href=\"https://www.ssh.com/ssh/config/\">~/.ssh/config</a>. In it there should be an entry for each domain/host:</p>\n<div class=\"gatsby-highlight\" data-language=\"config\"><pre class=\"language-config\"><code class=\"language-config\">IdentityFile ~/.ssh/deault\n\nHost github.com\n    HostName github.com\n    AddKeysToAgent yes\n    UseKeychain yes\n    IdentityFile ~/.ssh/github\n\nHost mydomain1.com\n    HostName mydomain1.com\n    AddKeysToAgent yes\n    UseKeychain yes\n    User myuser\n    IdentityFile ~/.ssh/mydomain1\n\nHost mydomain2.com\n    HostName mydomain2.com\n    AddKeysToAgent yes\n    UseKeychain yes\n    User myuser\n    IdentityFile ~/.ssh/mydomain2</code></pre></div>\n<p>To note, for some hosts the username is specified, so that it would be possible to create an ssh connection using only the domain, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> mydomain1.com</code></pre></div>\n<p>instead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> myuser@mydomain1.com</code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/blog/ssh_multiple_keys_config/#requirements\">Requirements</a></li>\n<li><a href=\"/blog/ssh_multiple_keys_config/#creates-keys\">Creates keys</a></li>\n<li><a href=\"/blog/ssh_multiple_keys_config/#configure-ssh\">Configure SSH</a></li>\n</ul>","timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false}}