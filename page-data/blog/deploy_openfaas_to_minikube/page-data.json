{"componentChunkName":"component---src-templates-blog-js","path":"/blog/deploy_openfaas_to_minikube/","result":{"data":{"site":{"siteMetadata":{"disqusShortname":"pasdam-github-io","title":"/dev/null"}},"markdownRemark":{"id":"ef4b9574-1236-5852-9631-7c9ab93cb74e","frontmatter":{"date":"May 21, 2020","title":"Deploy OpenFaas to minikube","tags":["docker","kubernetes","minikube","openfaas"]},"html":"<p><a href=\"https://www.openfaas.com/\">OpenFaas</a> is an open source\n<a href=\"https://en.wikipedia.org/wiki/Function_as_a_service\">FaaS</a> platform that\nallows to deploy event-driven functions and microservices to Kubernetes quickly.</p>\n<p>In this tutorial we will see how to deploy it. In particular we will use\n<a href=\"https://github.com/kubernetes/minikube\">minikube</a>, which implements a simple\nlocal k8s cluster.</p>\n<!-- intro_end -->\n<p>Source: <a href=\"https://docs.openfaas.com/deployment/kubernetes/#c-deploy-using-kubectl-and-plain-yaml-for-development-only\">OpenFaas Doc</a></p>\n<h2 id=\"requirements\" style=\"position:relative;\"><a href=\"#requirements\" aria-label=\"requirements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Requirements</h2>\n<p>This are the tools used, in parenthesis the version used for the tutorial:</p>\n<ul>\n<li><a href=\"https://www.docker.com\">docker</a> (19.03.8);</li>\n<li><a href=\"https://helm.sh\">helm</a> (3.2.1);</li>\n<li><a href=\"https://github.com/kubernetes/minikube\">minikube</a> (1.10.1);</li>\n<li><a href=\"https://github.com/openfaas/faas-cli#get-started-install-the-cli\">openfaas cli</a>\n(0.12.4).</li>\n</ul>\n<p>Please refer to the respective documentation on how to install them.</p>\n<h2 id=\"start-minikube\" style=\"position:relative;\"><a href=\"#start-minikube\" aria-label=\"start minikube permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start minikube</h2>\n<p>We will use minikube with the docker driver so that the k8s node will be\nrunning in a container:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">minikube start --driver<span class=\"token operator\">=</span>docker</code></pre></div>\n<h2 id=\"deploy-openfaas\" style=\"position:relative;\"><a href=\"#deploy-openfaas\" aria-label=\"deploy openfaas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy OpenFaas</h2>\n<p>First thing to do is to create the required namespaces:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ kubectl apply -f https://raw.githubusercontent.com/openfaas/faas-netes/master/namespaces.yml\nnamespace/openfaas created\nnamespace/openfaas-fn created</code></pre></div>\n<p>Then we should create credentials for the <a href=\"https://docs.openfaas.com/architecture/gateway/\">gateway</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">PASSWORD</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">head</span> -c <span class=\"token number\">12</span> /dev/urandom <span class=\"token operator\">|</span> shasum <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d<span class=\"token string\">' '</span> -f1<span class=\"token variable\">)</span></span>\nkubectl -n openfaas create secret generic basic-auth <span class=\"token punctuation\">\\</span>\n    --from-literal<span class=\"token operator\">=</span>basic-auth-user<span class=\"token operator\">=</span>admin <span class=\"token punctuation\">\\</span>\n    --from-literal<span class=\"token operator\">=</span>basic-auth-password<span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$PASSWORD</span>\"</span></code></pre></div>\n<p>At this point we need to add the repository to be able to download the helm\ntemplate:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">helm repo <span class=\"token function\">add</span> openfaas https://openfaas.github.io/faas-netes/\nhelm repo update</code></pre></div>\n<p>Now we can generate the deployment files using Helm and apply it:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">helm template <span class=\"token punctuation\">\\</span>\n    openfaas openfaas/openfaas <span class=\"token punctuation\">\\</span>\n    --namespace openfaas <span class=\"token punctuation\">\\</span>\n    --set <span class=\"token assign-left variable\">basic_auth</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n    --set <span class=\"token assign-left variable\">functionNamespace</span><span class=\"token operator\">=</span>openfaas-fn <span class=\"token punctuation\">\\</span>\n    --set faasnetes.imagePullPolicy<span class=\"token operator\">=</span><span class=\"token string\">\"IfNotPresent\"</span> <span class=\"token punctuation\">\\</span>\n    --set ingress.enabled<span class=\"token operator\">=</span>true <span class=\"token operator\">></span> openfaas.yaml\nkubectl apply -f openfaas.yaml</code></pre></div>\n<p>OpenFaas should be deployed now:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ kubectl get pods -n openfaas\nNAME                                 READY   STATUS    RESTARTS   AGE\nalertmanager-9668b5785-2ftwn         <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nbasic-auth-plugin-56c84b75b6-khhkx   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nfaas-idler-6c9b9cb54f-fnr89          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\ngateway-6bff97c6cd-twfpv             <span class=\"token number\">2</span>/2     Running   <span class=\"token number\">0</span>          10m\nnats-58d4d5db8d-k22kp                <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nprometheus-8b754b655-lmfft           <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m\nqueue-worker-744c85f647-qkb2t        <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">0</span>          10m</code></pre></div>\n<p>Next step is to port-forward the gateway to the local machine:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">kubectl port-forward svc/gateway -n openfaas <span class=\"token number\">31112</span>:8080 <span class=\"token operator\">&amp;</span></code></pre></div>\n<p>so that we can login:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">OPENFAAS_URL</span><span class=\"token operator\">=</span>http://127.0.0.1:31112\n<span class=\"token builtin class-name\">echo</span> -n <span class=\"token variable\">$PASSWORD</span> <span class=\"token operator\">|</span> faas-cli login --password-stdin</code></pre></div>\n<p>and eventually open the web ui at <a href=\"http://localhost:31112\">localhost:31112</a>.</p>\n<h2 id=\"deploy-custom-function\" style=\"position:relative;\"><a href=\"#deploy-custom-function\" aria-label=\"deploy custom function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy custom function</h2>\n<p>In order to deploy local function to the cluster, it's necessary to point your\nshell to use minikube's docker deamon:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>minikube docker-env<span class=\"token variable\">)</span></span></code></pre></div>\n<p>This step is necessary as during the deploy OpenFaas needs to pull the function's\nimage, but the host's daemon is not available inside the cluster, hence it won't\nbe possible to pull the image from it.</p>\n<p>So now we can build the function (refer to the\n<a href=\"https://docs.openfaas.com/cli/templates/\">official documentation</a> to see how\nto write one):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">faas build</code></pre></div>\n<p>This last command will build the image inside the minikube container itself, so\nthe image will be available to OpenFaas when we will perform the deploy with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">faas deploy</code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/blog/deploy_openfaas_to_minikube/#requirements\">Requirements</a></li>\n<li><a href=\"/blog/deploy_openfaas_to_minikube/#start-minikube\">Start minikube</a></li>\n<li><a href=\"/blog/deploy_openfaas_to_minikube/#deploy-openfaas\">Deploy OpenFaas</a></li>\n<li><a href=\"/blog/deploy_openfaas_to_minikube/#deploy-custom-function\">Deploy custom function</a></li>\n</ul>","timeToRead":3}},"pageContext":{}}}