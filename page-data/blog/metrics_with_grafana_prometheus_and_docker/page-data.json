{"componentChunkName":"component---src-templates-blog-js","path":"/blog/metrics_with_grafana_prometheus_and_docker/","webpackCompilationHash":"7f76231b5902c55605bd","result":{"data":{"site":{"siteMetadata":{"disqusShortname":"pasdam-github-io","title":"/dev/null"}},"markdownRemark":{"id":"f3cd48e0-c6f1-5294-9666-4d2cf89c6ae6","frontmatter":{"date":"April 18, 2020","title":"Configure Grafana to pull metrics from Prometheus","tags":["grafana","prometheus","telegraf","metrics","statsD"]},"html":"<p><a href=\"https://grafana.com/\">Grafana</a> is a great tool to create dashboards to\nvisualize data, it can use different sources to pull data from. In this article\nwe're going to use <a href=\"https://prometheus.io/\">Prometheus</a> for this role.</p>\n<p>We won't investigate all the features of it, for example it can be used\nfor alerting as well, but in this post we're going to use it simply as a data\nsource.</p>\n<p>We're going to setup the whole stack using docker-compose. For the impatient the\ncode is in a\n<a href=\"https://github.com/pasdam/docker-stack-grafana-prometheus\">github repo</a>.</p>\n<!-- intro_end -->\n<h2 id=\"flow\"><a href=\"#flow\" aria-label=\"flow permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flow</h2>\n<p>The metrics publishing flow is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+---------+   +-------------------+   +------------+   +---------+\n| Service +--&gt;| Prometheus client +--&gt;+ Prometheus +--&gt;+ Grafana |\n+---------+   +-------------------+   +------------+   +---------+</code></pre></div>\n<ol>\n<li>the <em>service</em> reports the metrics to the <em>prometheus client</em>;</li>\n<li>the <em>Prometheus client</em> exposes a page with all the metrics that <em>Prometheus</em>\npulls;</li>\n<li><em>Grafana</em> queries data from <em>Prometheus</em> to visualize graphs.</li>\n</ol>\n<p>For the sake of simplicity we're going to skip the service and use the command\nline to create metrics.</p>\n<h2 id=\"configure-the-prometheus-client\"><a href=\"#configure-the-prometheus-client\" aria-label=\"configure the prometheus client permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure the prometheus client</h2>\n<p>There are different clients to export metrics, for instance a simple\n<a href=\"https://github.com/prometheus/statsd_exporter\">statsD-exported</a>, but in this\narticle we're going to use\n<a href=\"https://www.influxdata.com/time-series-platform/telegraf/\">Telegraf</a> as it can\nget metrics from different sources (i.e. StatsD, file, ...), and output them in\ndifferent formats, we of course are going to use the <em>Prometheus</em> one.</p>\n<p>Note that since we're skipping the service we use\n<a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/inputs/statsd\">StatsD plugin</a>\nto enable the\n<a href=\"https://github.com/statsd/statsd#usage\">StatsD protocol</a> in\n<a href=\"https://www.influxdata.com/time-series-platform/telegraf/\">Telegraf</a>.</p>\n<p>So let's create a docker-compose file with the client:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">telegraf</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> telegraf<span class=\"token punctuation\">:</span>1.14.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> 8125<span class=\"token punctuation\">:</span>8125/udp\n            <span class=\"token punctuation\">-</span> 9273<span class=\"token punctuation\">:</span><span class=\"token number\">9273</span>\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> ./telegraf/telegraf.conf<span class=\"token punctuation\">:</span>/etc/telegraf/telegraf.conf</code></pre></div>\n<p>There are few things to notice here: there are two exposed ports, and we're\nmounting the configuration from the local filesystem.</p>\n<p>About the ports, we are exposing the following:</p>\n<ul>\n<li><em>8125</em>: this is the port on which the <a href=\"https://github.com/statsd/statsd\">StatsD</a>\nclient is listening to in order to receive the metrics;</li>\n<li><em>9273</em>: on this port the client is exposing the web page Prometheus will pull\nto get the metrics.</li>\n</ul>\n<p>The configuration is mounted as volume. The content of <code class=\"language-text\">./telegraf/telegraf.conf</code>\nis the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">inputs.statsd</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">metric_separator</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\".\"</span>\n  <span class=\"token key property\">service_address</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\":8125\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">outputs.prometheus_client</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key property\">listen</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\":9273\"</span>\n  <span class=\"token key property\">metric_version</span> <span class=\"token punctuation\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p>Nothing fancy here, we're enabling the\n<a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/inputs/statsd\">StatsD input</a>\nand the\n<a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/outputs/prometheus_client\">Prometheus Client</a>\noutput.</p>\n<p>If we did everything right <em>Telegraf</em> opening\n<a href=\"http://localhost:9273/metrics\">localhost:9273/metrics</a> you should see something\nlike:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\ngo_goroutines 37\n# HELP go_info Information about the Go environment.\n# TYPE go_info gauge\ngo_info{version=&quot;go1.13.8&quot;} 1\n# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.\n# TYPE go_memstats_alloc_bytes gauge\ngo_memstats_alloc_bytes 7.887336e+06\n# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.\n# TYPE go_memstats_alloc_bytes_total counter\ngo_memstats_alloc_bytes_total 6.165966528e+09</code></pre></div>\n<p>To send test metrics you can use the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo -n &quot;custom_metric:20|g|#shell&quot; &gt; /dev/udp/localhost/8125</code></pre></div>\n<p>Or on macOS</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo -n &quot;custom_metric:20|g|#shell&quot; | nc -4u -w0 localhost 8125</code></pre></div>\n<p>where <code class=\"language-text\">20</code> is the value, <code class=\"language-text\">g</code> is the type (gauge), and <code class=\"language-text\">#shell</code> is the tag. If\nyou refresh the web page, now you should see <code class=\"language-text\">custom_metric</code> with the expected\nvalue.</p>\n<h2 id=\"configure-prometheus\"><a href=\"#configure-prometheus\" aria-label=\"configure prometheus permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Prometheus</h2>\n<p>At this point we can configure <em>Prometheus</em>. Just add the component to the\ndocker-compose file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># telegraf ...</span>\n\n    <span class=\"token key atrule\">prometheus</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> prom/prometheus<span class=\"token punctuation\">:</span>v2.17.1\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9090:9090\"</span>\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> ./prometheus/prometheus.yml<span class=\"token punctuation\">:</span>/etc/prometheus/prometheus.yml\n            <span class=\"token punctuation\">-</span> ./prometheus/volumes/data<span class=\"token punctuation\">:</span>/prometheus</code></pre></div>\n<p>The port will be used by <em>Grafana</em> to pull metrics.</p>\n<p>Also in this case we're mounting the configuration as a volume, plus we're also\nmounting a local folder in which the application data will be stored. The\nconfiguration is:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">global</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">scrape_interval</span><span class=\"token punctuation\">:</span> 5s\n\n<span class=\"token key atrule\">scrape_configs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prometheus'</span>\n    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'localhost:9090'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">job_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'telegraf'</span>\n    <span class=\"token key atrule\">static_configs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">targets</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'telegraf:9273'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Here we're configuring the interval with which it should pull the metrics, 5\nseconds, and then we're specifying from where:</p>\n<ul>\n<li><code class=\"language-text\">localhost:9090</code> all we're doing here is reading the metrics Prometheus\nexposes itself;</li>\n<li><code class=\"language-text\">telegraf:9273</code>, this is the configuration to enable Prometheus to pull data\nfrom the Telegraf container.</li>\n</ul>\n<p>To test that everything went well, try to connect to the\n<a href=\"http://localhost:9090\">Prometheus web UI</a>.</p>\n<h2 id=\"configure-grafana\"><a href=\"#configure-grafana\" aria-label=\"configure grafana permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Grafana</h2>\n<p>Only the last piece of the puzzle is missing: Grafana.</p>\n<p>Let's add the service to the docker-compose file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># telegraf ...</span>\n    <span class=\"token comment\"># prometheus ...</span>\n    <span class=\"token key atrule\">grafana</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> grafana/grafana<span class=\"token punctuation\">:</span>6.7.2\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3000:3000\"</span>\n        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> ./grafana/volumes/data<span class=\"token punctuation\">:</span>/var/lib/grafana</code></pre></div>\n<p>As before we're exposing the port on which the app is listening, and mounting a\nlocal directory as data folder.</p>\n<p>So now we can open Grafana: <a href=\"http://localhost:3000\">localhost:3000</a>. We didn't\nconfigure any security settings so the default login is <code class=\"language-text\">admin</code>/<code class=\"language-text\">admin</code> (it will\nask you to change the password at the first access, but you can skip it for\ntest setups).</p>\n<p>Next step it to add a data source to pull metrics from. Go to\n<code class=\"language-text\">Settings &gt; Data sources</code>, and <a href=\"http://localhost:3000/datasources/new\">add</a> a\nnew Prometheus one. The only thing to specify is the url,\n<a href=\"http://prometheus:9090\">http://prometheus:9090</a>, leave the rest as default and\nclick on <code class=\"language-text\">Save and test</code>.</p>\n<p>At this point it's possible to import Prometheus default dashboards, opening the\nnewly created data source, and click on the import button on each row in the\n<code class=\"language-text\">Dashboards</code> tab.</p>\n<p>Now you can play with Grafana and create your own dashboard.</p>","tableOfContents":"<ul>\n<li><a href=\"/blog/metrics_with_grafana_prometheus_and_docker/#flow\">Flow</a></li>\n<li><a href=\"/blog/metrics_with_grafana_prometheus_and_docker/#configure-the-prometheus-client\">Configure the prometheus client</a></li>\n<li><a href=\"/blog/metrics_with_grafana_prometheus_and_docker/#configure-prometheus\">Configure Prometheus</a></li>\n<li><a href=\"/blog/metrics_with_grafana_prometheus_and_docker/#configure-grafana\">Configure Grafana</a></li>\n</ul>","timeToRead":5}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}