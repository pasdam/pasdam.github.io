{"componentChunkName":"component---src-templates-tag-js","path":"/tags/pattern/","result":{"data":{"site":{"siteMetadata":{"title":"/dev/null"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"id":"5555a2d7-c0d5-5ef4-a9a1-0b758afa9b28","excerpt":"<p>Traditionally, Java programs have returned null as a way to represent that a value isnâ€™t present. The version 8 of the SDK includes a new class which was made specifically to manage missing values.</p>\n<p>I won't describe the details of the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html\">Optional</a> class, but very briefly it's   a container object which may or may not contain a non-null value. Therefore, it is possible to manipulate null values as if they were normal instances without necessarily having to perform a null check at every step.</p>\n<p>In this article, I'm going to talk about experiences I gathered while working with Java and describe some anti-patterns I've seen about such class.</p>\n","frontmatter":{"date":"2019-09-27","title":"The Optional anti-patterns in Java"},"timeToRead":6,"fields":{"slug":"/blog/java_optional_antipattern/"}}}]}},"pageContext":{"tag":"pattern"}}}