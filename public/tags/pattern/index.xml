<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pattern on /dev/null</title><link>https://pasdam.github.io/tags/pattern/</link><description>Recent content in Pattern on /dev/null</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 27 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://pasdam.github.io/tags/pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>The Optional anti-patterns in Java</title><link>https://pasdam.github.io/blog/posts/java_optional_antipattern/</link><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid>https://pasdam.github.io/blog/posts/java_optional_antipattern/</guid><description>&lt;p>Traditionally, Java programs have returned null as a way to represent that a value isnâ€™t present. The version 8 of the SDK includes a new class which was made specifically to manage missing values.&lt;/p>
&lt;p>I won&amp;rsquo;t describe the details of the &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">Optional&lt;/a> class, but very briefly it&amp;rsquo;s a container object which may or may not contain a non-null value. Therefore, it is possible to manipulate null values as if they were normal instances without necessarily having to perform a null check at every step.&lt;/p>
&lt;p>In this article, I&amp;rsquo;m going to talk about experiences I gathered while working with Java and describe some anti-patterns I&amp;rsquo;ve seen about such class.&lt;/p></description></item></channel></rss>